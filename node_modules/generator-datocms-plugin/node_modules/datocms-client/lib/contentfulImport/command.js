"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _appClient = _interopRequireDefault(require("./appClient"));

var _getContentfulData = _interopRequireDefault(require("./getContentfulData"));

var _destroyExistingModels = _interopRequireDefault(require("./destroyExistingModels"));

var _destroyExistingAssets = _interopRequireDefault(require("./destroyExistingAssets"));

var _removeAllValidators = _interopRequireDefault(require("./removeAllValidators"));

var _setLocales = _interopRequireDefault(require("./setLocales"));

var _createModels = _interopRequireDefault(require("./createModels"));

var _createFields = _interopRequireDefault(require("./createFields"));

var _createRecords = _interopRequireDefault(require("./createRecords"));

var _addValidationsOnField = _interopRequireDefault(require("./addValidationsOnField"));

var _linkRecords = _interopRequireDefault(require("./linkRecords"));

var _createUploads = _interopRequireDefault(require("./createUploads"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(contentfulToken, contentfulSpaceId, datoCmsToken) {
    var client, datoClient, contentfulData, itemTypes, fieldsMapping, contentfulRecordMap;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _appClient.default)(contentfulToken, contentfulSpaceId, datoCmsToken);

          case 2:
            client = _context.sent;
            datoClient = client.dato;
            _context.next = 6;
            return (0, _getContentfulData.default)(client.contentful);

          case 6:
            contentfulData = _context.sent;
            _context.next = 9;
            return (0, _removeAllValidators.default)({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 9:
            _context.next = 11;
            return (0, _destroyExistingModels.default)({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 11:
            _context.next = 13;
            return (0, _destroyExistingAssets.default)({
              datoClient: datoClient
            });

          case 13:
            _context.next = 15;
            return (0, _setLocales.default)({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 15:
            _context.next = 17;
            return (0, _createModels.default)({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 17:
            itemTypes = _context.sent;
            _context.next = 20;
            return (0, _createFields.default)({
              itemTypes: itemTypes,
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 20:
            fieldsMapping = _context.sent;
            _context.next = 23;
            return (0, _createRecords.default)({
              itemTypes: itemTypes,
              fieldsMapping: fieldsMapping,
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 23:
            contentfulRecordMap = _context.sent;
            _context.next = 26;
            return (0, _createUploads.default)({
              fieldsMapping: fieldsMapping,
              itemTypes: itemTypes,
              datoClient: datoClient,
              contentfulData: contentfulData,
              contentfulRecordMap: contentfulRecordMap
            });

          case 26:
            _context.next = 28;
            return (0, _addValidationsOnField.default)({
              itemTypes: itemTypes,
              fieldsMapping: fieldsMapping,
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 28:
            _context.next = 30;
            return (0, _linkRecords.default)({
              fieldsMapping: fieldsMapping,
              datoClient: datoClient,
              contentfulData: contentfulData,
              contentfulRecordMap: contentfulRecordMap
            });

          case 30:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;