"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _node = _interopRequireDefault(require("pusher-js/node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var apiKey = '75e6ef0fe5d39f481626';
var cluster = 'mt1';

var SiteChangeWatcher =
/*#__PURE__*/
function () {
  function SiteChangeWatcher(siteId) {
    _classCallCheck(this, SiteChangeWatcher);

    this.socket = new _node.default(apiKey, {
      cluster: cluster
    });
    this.siteId = siteId;
  }

  _createClass(SiteChangeWatcher, [{
    key: "connect",
    value: function connect(cb) {
      this.channel = this.socket.subscribe("site-".concat(this.siteId));
      this.channel.bind('site:change', cb);
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.socket.unsubscribe("site-".concat(this.siteId));
      this.socket.disconnect();
    }
  }]);

  return SiteChangeWatcher;
}();

exports.default = SiteChangeWatcher;