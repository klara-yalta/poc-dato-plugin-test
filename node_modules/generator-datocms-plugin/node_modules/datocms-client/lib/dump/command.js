"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _prettyError = _interopRequireDefault(require("pretty-error"));

var _ora = _interopRequireDefault(require("ora"));

var _SiteClient = _interopRequireDefault(require("../site/SiteClient"));

var _detectSsg = _interopRequireDefault(require("./detectSsg"));

var _dump = _interopRequireDefault(require("./dump"));

var _SiteChangeWatcher = _interopRequireDefault(require("./SiteChangeWatcher"));

var _requireToken = _interopRequireDefault(require("./requireToken"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(options) {
  var configFile = _path.default.resolve(options['--config'] || 'dato.config.js');

  var tokenOption = options['--token'] || process.env.DATO_API_TOKEN;
  var watch = options['--watch'];
  var quiet = options['--quiet'];
  var previewMode = options['--preview'];
  var tokenPromise;

  if (tokenOption) {
    tokenPromise = Promise.resolve(tokenOption);
  } else {
    tokenPromise = (0, _requireToken.default)();
  }

  return tokenPromise.then(function (token) {
    try {
      _fs.default.accessSync(configFile);
    } catch (e) {
      process.stderr.write("Missing config file ".concat(configFile, "\n"));
      process.exit(1);
    }

    var client = new _SiteClient.default(token, {
      'X-Reason': 'dump',
      'X-SSG': (0, _detectSsg.default)(process.cwd())
    });

    function exec() {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var text = 'Fetching content from DatoCMS';

      if (prefix) {
        text = "".concat(prefix, "! ").concat(text);
      }

      var spinner = (0, _ora.default)(text).start();
      return (0, _dump.default)(configFile, client, previewMode).then(function (operations) {
        spinner.succeed();

        if (!quiet) {
          process.stdout.write('\n');
          operations.forEach(function (operation) {
            return process.stdout.write("* ".concat(operation, "\n"));
          });
          process.stdout.write('\n');
        }
      }).catch(function (e) {
        spinner.fail();
        process.stderr.write(new _prettyError.default().render(e));
      });
    }

    if (watch) {
      return exec().then(function () {
        return client.site.find();
      }).then(function (site) {
        var watcher = new _SiteChangeWatcher.default(site.id);
        watcher.connect(exec.bind(null, 'Detected site data change'));

        _chokidar.default.watch(configFile).on('change', exec.bind(null, 'Detected change to config file'));

        process.on('SIGINT', function () {
          watcher.disconnect();
          process.exit();
        });
      });
    }

    return exec();
  });
}