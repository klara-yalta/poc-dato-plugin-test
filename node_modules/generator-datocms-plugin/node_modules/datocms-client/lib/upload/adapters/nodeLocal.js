"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = nodeLocal;

var _request = _interopRequireDefault(require("request"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _denodeify = _interopRequireDefault(require("denodeify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var stat = (0, _denodeify.default)(_fs.default.stat);

function uploadToS3(url, filePath, size) {
  return new Promise(function (resolve, reject) {
    var req = _request.default.put({
      url: url,
      headers: {
        'x-amz-acl': 'public-read',
        'content-length': size
      }
    }).on('response', function (res) {
      if (res.statusCode === 200) {
        resolve();
      } else {
        reject(new Error("Invalid status code: ".concat(res.statusCode)));
      }
    }).on('error', reject);

    _fs.default.createReadStream(filePath).pipe(req);
  });
}

function nodeLocal(_x, _x2) {
  return _nodeLocal.apply(this, arguments);
}

function _nodeLocal() {
  _nodeLocal = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(client, filePath) {
    var _ref, size, format, _ref2, id, url;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return stat(filePath);

          case 2:
            _ref = _context.sent;
            size = _ref.size;
            format = _path.default.extname(filePath).slice(1);
            _context.next = 7;
            return client.uploadRequest.create({
              filename: _path.default.basename(filePath)
            });

          case 7:
            _ref2 = _context.sent;
            id = _ref2.id;
            url = _ref2.url;
            _context.next = 12;
            return uploadToS3(url, filePath, size);

          case 12:
            return _context.abrupt("return", {
              path: id,
              size: size,
              format: format
            });

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _nodeLocal.apply(this, arguments);
}