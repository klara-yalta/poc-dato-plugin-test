"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateClient;

require("proxy-polyfill");

var _jsonSchemaRefParser = _interopRequireDefault(require("json-schema-ref-parser"));

var _pluralize = _interopRequireDefault(require("pluralize"));

var _humps = require("humps");

var _fetch = _interopRequireDefault(require("./fetch"));

var _deserializeJsonApi = _interopRequireDefault(require("./deserializeJsonApi"));

var _serializeJsonApi = _interopRequireDefault(require("./serializeJsonApi"));

var _Client = _interopRequireDefault(require("../Client"));

var _fetchAllPages = _interopRequireDefault(require("./fetchAllPages"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getProps = function getProps(obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getPrototypeOf(obj) !== Object.prototype && Object.getOwnPropertyNames(Object.getPrototypeOf(obj))).filter(function (p) {
    return p !== 'constructor';
  });
};

var toMap = function toMap(keys) {
  return keys.reduce(function (acc, prop) {
    return Object.assign(acc, _defineProperty({}, prop, true));
  }, {});
};

function generateClient(subdomain, cache) {
  var extraMethods = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return function Client(token) {
    var extraHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var baseUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "https://".concat(subdomain, ".datocms.com");
    var schemaPromise;
    var rawClient = new _Client.default(token, extraHeaders, baseUrl);
    var extraProps = getProps(extraMethods);
    var rawClientProps = getProps(rawClient);
    Object.assign(cache, {
      client: true
    }, toMap(extraProps), toMap(rawClientProps));
    var client = new Proxy(cache, {
      get: function get(obj1, namespace) {
        if (namespace === 'client') {
          return rawClient;
        }

        if (rawClientProps.includes(namespace)) {
          return typeof rawClient[namespace] === 'function' ? rawClient[namespace].bind(rawClient) : rawClient[namespace];
        }

        if (extraProps.includes(namespace)) {
          return typeof extraMethods[namespace] === 'function' ? extraMethods[namespace].bind(client, client) : extraMethods[namespace];
        }

        return new Proxy(cache[namespace] || {}, {
          get: function get(obj2, apiCall) {
            return function call() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              if (!schemaPromise) {
                schemaPromise = (0, _fetch.default)("https://".concat(subdomain, ".datocms.com/docs/").concat(subdomain, "-hyperschema.json")).then(function (res) {
                  return res.json();
                }).then(function (schema) {
                  return _jsonSchemaRefParser.default.dereference(schema);
                });
              }

              return schemaPromise.then(function (schema) {
                var singularized = (0, _humps.decamelize)(_pluralize.default.singular(namespace));
                var sub = schema.properties[singularized];

                if (!sub) {
                  throw new TypeError("".concat(namespace, " is not a valid namespace"));
                }

                var methodNames = {
                  instances: 'all',
                  self: 'find'
                };
                var identityRegexp = /\{\(.*?definitions%2F(.*?)%2Fdefinitions%2Fidentity\)}/g;
                var link = sub.links.find(function (l) {
                  return (methodNames[l.rel] || (0, _humps.camelize)(l.rel)) === apiCall;
                });

                if (!link) {
                  throw new TypeError("".concat(namespace, ".").concat(apiCall, " is not a valid API method"));
                }

                var lastUrlId;
                var url = link.href.replace(identityRegexp, function () {
                  lastUrlId = args.shift();
                  return lastUrlId;
                });
                var body = {};

                if (link.schema && (link.method === 'PUT' || link.method === 'POST')) {
                  var unserializedBody = args.shift();
                  body = (0, _serializeJsonApi.default)(singularized, unserializedBody, link, link.method === 'PUT' && lastUrlId);
                }

                if (link.method === 'POST') {
                  return rawClient.post("".concat(url), body).then(function (response) {
                    return Promise.resolve((0, _deserializeJsonApi.default)(response));
                  });
                }

                if (link.method === 'PUT') {
                  return rawClient.put("".concat(url), body).then(function (response) {
                    return Promise.resolve((0, _deserializeJsonApi.default)(response));
                  });
                }

                if (link.method === 'DELETE') {
                  return rawClient.delete(url).then(function (response) {
                    return Promise.resolve((0, _deserializeJsonApi.default)(response));
                  });
                }

                var queryString = args.shift();
                var options = args.shift() || {};
                var deserializeResponse = Object.prototype.hasOwnProperty.call(options, 'deserializeResponse') ? options.deserializeResponse : true;
                var allPages = Object.prototype.hasOwnProperty.call(options, 'allPages') ? options.allPages : false;
                var request = allPages ? (0, _fetchAllPages.default)(rawClient, url, queryString) : rawClient.get(url, queryString);
                return request.then(function (response) {
                  return Promise.resolve(deserializeResponse ? (0, _deserializeJsonApi.default)(response) : response);
                });
              });
            };
          }
        });
      }
    });
    return client;
  };
}