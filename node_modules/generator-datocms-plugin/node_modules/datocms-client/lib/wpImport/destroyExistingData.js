"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = destroyExistingData;

var _progress = require("./utils/progress");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function destroyExistingData(_x) {
  return _destroyExistingData.apply(this, arguments);
}

function _destroyExistingData() {
  _destroyExistingData = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(dato) {
    var itemTypes, itemTypesToDestroy, tick, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, itemType;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _progress.spin)('Fetching existing data', dato.itemTypes.all());

          case 2:
            itemTypes = _context.sent;
            itemTypesToDestroy = itemTypes.filter(function (it) {
              return ['author', 'category', 'tag', 'article', 'page'].includes(it.apiKey);
            });
            tick = (0, _progress.progress)('Destroying existing data', itemTypesToDestroy.length);
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 8;
            _iterator = itemTypesToDestroy[Symbol.iterator]();

          case 10:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 17;
              break;
            }

            itemType = _step.value;
            _context.next = 14;
            return tick(itemType.id, dato.itemTypes.destroy(itemType.id));

          case 14:
            _iteratorNormalCompletion = true;
            _context.next = 10;
            break;

          case 17:
            _context.next = 23;
            break;

          case 19:
            _context.prev = 19;
            _context.t0 = _context["catch"](8);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 23:
            _context.prev = 23;
            _context.prev = 24;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 26:
            _context.prev = 26;

            if (!_didIteratorError) {
              _context.next = 29;
              break;
            }

            throw _iteratorError;

          case 29:
            return _context.finish(26);

          case 30:
            return _context.finish(23);

          case 31:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[8, 19, 23, 31], [24,, 26, 30]]);
  }));
  return _destroyExistingData.apply(this, arguments);
}